

Element: System
	eg) System.out.println("Hello, World!");
	- This denotes that the subsequent expression will call upon the System class, from the 
java.lang package.

java.lang package
	- Auto imported into every java program
	- contains classes and interfaces that are essential to the Java language.
	- primative types (boolean, int, float, byte, ect), and System, string, Thread


Element: (dot operator) .
eg) obj.toString(); 
	-Dot operators provide you access to a classes members; i.e. its fields
(variables) and its methods. 
	-'obj' is dereferenced. 
	-Dereferencing follows the memory address stored in a reference, to the place in memory where the 
actual object resides. 

Field  
	is a variable inside a class. 

Members 
	Variables, Methods, Inner class, or (the super class's constructor)
	
Literal:
	-A variable is a name that can represent different values during the execution of the program. 
	-A constant is a name that represents the same value throughout a program. 
	-But a literal is not a name -- it is the value itself.
	-A literal can be a number, a character, or a string. For example, in the expression,
		x = 3     x is a variable, and 3 is a literal.

Method Signature:
	Name + parameters
	ex) public void setMapReference(int xCoordinate, int yCoordinate) { //method code }
	- setMapReference(int, int) is the method signature
	
bytecode:
	Bytecode is program code that has been compiled from source code into low-level code designed for a 
software interpreter. It may be executed by a virtual machine (such as a JVM) or further compiled into 
machine code, which is recognized by the processor.
	bytecode is compiled programming code that targets a virtual machine rather than a specific 
computer architecture
	- if compiled into bytecode, then its a comiopled language (java, C)
	- if interpreted, then executing a program means reading the source file a line at a time, and doing 
what it says
	- interpreted is where the instructions are not directly executed by the target machine, but instead read and executed 
by some other program 

JVM:
	- Java Virtual Machine
	- A JVM is a software-based machine that runs Java programs. 
	- reads (interprets?) the compiled code, (bytecode) 
	- JVMs allow Java apps to run on almost any computer. Windows, OS X, and Linux 
	- similar to a physical processor. 
	- the Java code  from a .JAVA file must first be converted into instructions the JVM can understand.
		 called "bytecode,"

int: 2^15 (-,+)
double: 2^31 -,+
float: 32 bits
double 64 bits
long double 128



--------------------------------------------------------------------
	
- Javascript; Object based scripting (protype) language   
										| Java; OOP  language
- Javascript; Runs on a browser only.   | Java; Runs as an application, run on a virtual machine 
- Javascript; it is interpreted, not compiled. Every browser has a interpreter
										| Java; compiled and executed... machine code
- Javascript; event based 				| Java thread based 
- Javascript; DYNAMICALLY typed language | Java; STATICALLY typed language
- Javascript; Objects are PROTOYPE based | Java; Objects are class bassed, everything must be w/in a class
- Javascript easier to implement. 		 | Java faster, powerful
		https://www.geeksforgeeks.org/difference-between-java-and-javascript/

Prototype objects
	- Javascript
	- When already-created objects are cloned and reused to construct a program.
	- It uses a classless inheritance programming style in creating duplicate object instances.
	- Prototype-based programming is also known as classless programming or instance-based programming.
		https://www.techopedia.com/definition/30040/prototype-based-programming
	- Polymorphism NO
	- Inheritance NO
	- Encapsualtioon Yes
		
Statically typed language:
	- Java
	- the data type of a variable is known at compile time
	- all variables must first be declared before they can be used. 
	- Once declared to be of a certain data type, it cannot hold values of other data types
	- advantage: lots of trival bugs are caught at early stages
Dynamically typed languages: 
	- Javascript, Ruby, Python
	- variable types can change at run time. 
	- you dont have to specify the data type of the variable before compile time
	- advantage: faster programming

	
Scripting Language
	-scripts: programs written for a special run-time environment that automate the execution of tasks
that could alternatively be executed by a human operator
	- are often interpreted (rather than compiled).
	- a programming language is typically compiled first before being allowed to run, 
	- scripting languages are interpreted from source code or bytecode one command at a time.
	-  is a computer language with a series of commands within a file that is capable of being executed 
without being compiled
----------------------------------------------------------

Value: 
	- contents 
	- a number that has value to the programer
	- the representation of some entity that can be manipulated by a program
	
Reference: 
	- address, location,   
	- a value that enables a program to access a particular datum, such as a variable's value
	
Primativate data type - 
	- They are the most basic kinds of data types and they driectly contain values. 
	- 8 total: int, float, double, long, shot, byte, char, boolean
Object data 
	- programmer created types
	
	
Data Type
	- itentifies what type of data that an object can hold and what operations can be applied to it

---------------------------------------------------

Lambda
	- A function with no name.
	- An expression whose value is a function
	- Don't need to: declare the function somewhere else (and look for it later).
	- Naming something that you're only using once.
	Ex) args.foreach(arg => println(arg))
	- the argument to the foreach method is an expression for an anonymous function. 
	- lambda = anonymous function

	
------------------------------------------------------

Subtyping
	- when a subclass object is used in place of it's superclass
	- Cat is a subtype of Animal, then Cat can be used wherever Animal is use
	
Enumerated
	- a set of named values
	- identifiers that behave as constants in the language.
	- implicitly public static final.
	
-------------------------------------
OOP
------------------------------------

Object Oriented Programing
	- organized around data. "data controlling acces to code"
	- in an OO langauge you define the data and the routines that are permitted to act on that data.
	
	- Purpose; To break large complex programs down into small simple pieces that work together
	- is the relationships and interactions between classes/objects, without specifying the final 
application classes/objects that are involved
	
	- Encapsualtion
	- Abstraction
	- Polymorphism
	- Inheritance

Class
	-the blueprints/template for objcts, and describes the state/behavior
	-State: properties of an object
	-Behavior
	-  used to model real-world objects you find in life

Object
	- instance of a class
	- operates on its "own" data structure
	- exists in memory
	- could be multiple, but only 1 class to describe all of it's objects

------------------------------------------------------------

POLYMORPHISM 
	- the programming language's ability to process objects differently depending on 
their data type. 
	- IS-A test is considered to be polymorphic.
	- method overloading 
	- method overriding
	- subtyping
	- (when you access a object or type, the code determines which exact type it is and calls the associated 
code.)
	https://stackoverflow.com/questions/1031273/what-is-polymorphism-what-is-it-for-and-how-is-it-used

------------------------------------------------------------
ENCAPSULATION
	- a data-hiding mechanism that restricts access to the objects
	- It a mechanism of wrapping the variables and the methods that act on the data together as a single unit
		
	- Java's basic unit of encapsulation is the class. ... package 2nd example
	
	- Access Modifiers (public private) ... define the visibility of classes, methods, and attributes 
	- the variables of a class will be hidden from other classes, and can be accessed only 
through the methods of their current class. 
	Purpose: 
	- keeps code and data safe from outisde interferance and misuse.
	- prevents the data from being accessed from the outside
	- protect data
	- (flexible easier to change?)
	
--------------------------------------------------------------	
	
ABSTRACTION 
	- where you show only “relevant/essential” data and “hide” unnecessary details of an object from the user
	- "abstracting away the details"
	- making the programming simpler, reduce complexity.
	- generalizting, via abstract class & interface
	- Abstraction is about simplicity (removing & generalizing), Encapsualtioon is about security.
	
	- (providing only essential information about the data to the outside world, hiding the background 
details or implementation.)

---------------------------------------
																		
INHERITANCE	: IS-A		
																
	- where one class acquires the properties (methods and fields) of another.
	- Purpose: You can reuse the fields of another class
	
	- Cannot have multiple inheritacnes of classes (C# & Java) ... Diamond problems		 	 
	- Subclasses inherit: 
		- public members
		- protected
		- (private fields/methods are still accessible by methods and innter classes)
	- Subclasses DONT inherit:
		- private members 
		- Constructors
		- members with the same name as the Parent class
	- Members = Variables, Methods, Inner class, or (the super class's constructor)
	
	- Recall: When you create an object, that object will inherit fields from all of the class's 
superclasses.
	- methods or constructors of same field; problematic.
	- super class  = base class = parent class
	- subclass = derived class = extended class = child class
	- a super class is the parent class of a derived class
	
	-Subclass will have more methods and variables than super class
	-Subclass will inherit all the properties of the superclass except the 
private properties of the superclass
	- SubClass IS-A SuperClass
	
	Ex)
	public class Animal {}
	public class Mammal extends Animal {}				
	public class Dog extends Mammal {}
	- Animal is the superclass of Mammal Class ... Mammal IS A Animal
	- Mammal is the subclass of Animal						
	- Dog is the subclass of booth Mammal and Animal ... Dog IS A Mammal
	
	Ex)
public class mySuperClass {  }
public class subClass extends mySuperClass { }
public static void main(String(args[]){
	// The subclass will have at least all the properties of the superclass.
	// Thus this is possible
	mySuperClass superClassX = new subClass();
}
----------------------------
INTERFACE
	- The set of behaviours/controls on an object.
	- Typically, a company sells a software package that contains complex methods that another company 
wants to use in its own software product.

	- Contains only the declaration of the members, no body 
	- Can contain: methods, properties, events, indexers (C#)
	- Can't contain: constants, fields, operators, instance constructors, finalizers, or types. No static
	
	- Could implement mutliple interfaces to a class
	- In Java, Static methods and Default methods could be used in an interface to define a methods body 
in the interface. The purpose, so you dont have to change the class that implements the interfaec
	- Interfaces contain no implementation of methods. 
	- classes that implement interfaces must implement all its members.
	- A class or struct can implement multiple interfaces. A class can inherit a base class and also 
implement one or more interfaces.

	- Below: The list Interface is implemented by ArrayList, LinkedList, Vecor and Stack classes, and more
		List a = new ArrayList();
		List b = new LinkedList();
		List c = new Vector(); 
		List d = new Stack(); 
	 
ABSTRACT CLASS
	- for the sole purpose of making a class a subclass of another.
	- can only be subclassed
	- cannot be instantiated
	- Abstract method is a method that is declared without an implementation 
		Ex)	abstract void moveTo(double deltaX, double deltaY); { }
	- (C#) virtual means that a method could overriden) .
	- (Java) all non-static methods are by default "virtual functions." 
		- Only final methods (cannot be overridden), along with private methods (which are not inherited)
			are "non-virtual".
	- (C#) Override - for each abstract method you must use the override keyword in the subclass that inherit the 
		abstract  classes


---------------------------------------------------------									

FINAL in Java (sealed in C#)
- "final" class 	to prevent inheritence, your class from being subclassed. 
- "final" methos 	to prevent overriding, prevent certain methods within your class from being overriden. 
- "final" variable	to create constants, prevent changes to a variable's value. A final variable can only be 
initialized once,

IMMUTABLE
 - is an object whose state remains constant/cannot be modified after it was created.
 - Contains:
	- class & data members are private final.
	- a constructor
	- Getters
	- No setters
 Immutable vs Final
 - final is just a keyword whereas Immutable is a pattern
 - By declaring a reference variable as final, we won’t get any immutability nature
 - final ensures that the address of the object remains the same whereas the Immutable suggests that we 
can’t change the state of the object once created.
https://www.geeksforgeeks.org/final-vs-immutability-java/

SINGLETON
- a class that can have only one object of itself
- Contains: 
	- private constructor (prevents instantiating the object )
	- public variable/setters
	- "getter" for the object (static  accessor method, ie, a factory method to return the class member)
	- creates  static object of itself (private static mySingleton st = null;)


Instance Initialization Blocks 
	- executed before constructors. 
	- They are executed whenever the class is initialized and before constructors are invoked.
	- They are typically placed above the constructors within braces.
	https://www.geeksforgeeks.org/instance-initialization-block-iib-java/
 

	


----------------------------------------------------

	NOT (quite) OOP

----------------------------------------------------

GENERICS
	- Allows you to make "generic" methods or classes to whatever type
	- Allows types to be a parameter to methods, classes and interfaces.
		- thus generic method can be called with arguments of different types
	- can processes objects without stating what type the object is.
	Pros:
	- Code Reuse: can write a method/class/interface once and use for any type we want.
	- Type Safety: Generics make errors to appear at compile time instead of run time
	Ex) public class Box<T> {...}
	
	Bounded Type Parameterized
	- accept types which extend/implement a class/interface, (Comparable)
	- ? = wildcard = any type
	- public static <T extends Comparable<T>> T maximum(T x, T y, T z) {  T max = x; ..... }
	- add(List<? extends Number> list) .... Upper Bounded Wildcards
	- add(List<? super Integer) .......... Lower Bounded Wildcard
	
	- Parameterized type - a class that deals with other objects without stating what type it is.
				     	 - types that take other types as parameters. 	


--------------------------------------------------------------


ACCESS MODIFIERS:

	Access Levels
	Modifier	
				This Class	Package	Subclass	Entire App
	public		Y			Y		Y			Y
	protected	Y			Y		Y			N
	no modifier	Y			Y		N			N
	private		Y			N		N			N

	The above can be interupted like this:
	- Protected: Variables, methods, and constructors, which are declared protected in a superclass can 
	be accessed only by the subclasses in other package or any class within the package of the 
	protected members' class.

PACKAGE
	-  A set of related classes and interfaces [organized] inside of a namespace
	-  bundle of related types (classes, interfaces, enumerations, ect) 
	-  software written in the Java programming language can be composed of hundreds or thousands of 
	    individual classes, 
	- keep things organized by placing related classes and interfaces into packages.
	This allows you, the programmer, to focus on the design of your particular application, rather than the 
infrastructure required to make it work.

----------------------------------------------------

STATIC
	- A static variable will get memory only once and retain its value
		- all objects that have a static variable will have same value
	- A static method can be invoked without the need for creating an instance of a class.
	- A static method can access static data member and can change the value of it.	
	- It makes your program memory efficient (i.e., it saves memory).
	
	- in Java only static inner classes
	- in C#, a static class cannot be instantiated... Because there is no instance variable, you access the 
members of a static class by using the class name it

--------------------------------------------------------
--------------------------------------------------------
---------------     STACK & HEAP        ----------------
--------------------------------------------------------
--------------------------------------------------------

STACK
	- A block of memory that holds:
	1)	- references to other objects in the heap
		- local primatives
	2)	- data for current function call
			- its parameters 
			- return address
			- local variables
	- The new block (called stack frame) is created in the stack memory whenever a method is invoked
	ex) when the foo() method terminates, the memory for the method foo() is freed

	Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution.
	Stack memory is short-lived whereas heap memory lives from the start till the end of application execution.
	
	The run-time stack, consisting of stack frames, is responsible for program execution and function calls. 
	A stack frame contains all the data for one function call: its parameters, the return address, and its local variables. 

	The stack frame only exists during the execution time of a function, and so do the objects on the stack frame
	- stack frame a portion of memory allocated for a block of code, block of code = method?

	When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The 
address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are 
against the word "pointer". Whatever. Just know that the address of the object goes on the stack.
	
	
HEAP
	- holds all objects & its data
	- hold JRE classes

JRE (Java Runtime Environment )
	-provides the minimum requirements for executing a Java application; it consists of the Java Virtual Machine 
		(JVM), core classes, and supporting files.	
	


int    *ip;    /* pointer to an integer */
double *dp;    /* pointer to a double */
float  *fp;    /* pointer to a float */
char   *ch     /* pointer to a character */



	
Shallow/Deep Copy
	-Deep: Any object pointed to by the source is copied and the copy is pointed to. 
	So two completely separate objects will be created.
	-Shallow: Copies references.
	A shallow copy constructs a new compound object and then (to the extent possible) inserts references 
into it to the objects found in the original.
	A deep copy constructs a new compound object and then, recursively, inserts copies into it of the 
objects found in the original.
	
	
String Pool:
	-The string pool allows string constants to be reused, which is possible because strings in Java are 
immutable.




--------------------------------------------------------

--------------------------------------------------------

Design Patterns:
	- It is a template for how to solve a problem that can be used in many different 
situations/application or systems 
	- defines how it's done
	
MVC
	Model 	- Gets the data from the database or XML-file and processes it
			- responds to view and controller
	View	- UI, What the user sees
			- HTML/CSS
			- Templating engines
	Contoler- Takes user input 
			- Gets data from the model, passes data to the view
			- The controller accepts the requests and handles it!

Controller VS Router
	- Routers are part of the controller layer
	- Controller implements a »Controller pattern, 
		- Controller Pattern has these things/entities: 
			Dispatcher, Router, Action & more
	- Routing is the process of taking a URI endpoint decomposing it into parameters then determine which module, 
	controller, and action of that controller should receive the request.
	The router takes the request and decides which controller/controller methods will handle the request.
	The controller accepts the requests and handles it!
	
	
	- Controller pattern: requests are intercepted by controller and dispatched to individual Action Controllers based on 
the URL requested(that is routing request from Router).
			
MVC

frameworks that uses MVC concpets
- Flask
- Ruby on Rails
- Angular JS

Model - Database
- BUSINESS LOGIC
- gets and sends data
- interacts with dataase (SQL or NOSQL or XML or JSON)
- manipulates data
- communicat with controller
- sometimes can update the view (depends on framework

View - Client
- The UI, what user see
- HTML/CSS
- Communicates with controller
- Template Engines

Controller - Server
- COMMUNICATES BETWEEN Users/View and the Model
- 'middle man'
- Receives input (from view, clicking link, forms)
- contoler interaction between the model and view (user clicks, etc)
- Gets data from model ; passes data to the view
		
Controller

- Gets requets from View and sends to Model
- Gets response form model and sneds to view

--------------------------------------------------------
REST
	-In the REST architectural style, the implementation of the client and the implementation of the server 
can be done independently without each knowing about the other. This means that the code on the client side 
can be changed at any time without affecting the operation of the server, and the code on the server side 
can be changed without affecting the operation of the client.
	- stateless : the server does not need to know anything about what state the client is in and vice versa.
	GET 	— return 200 (OK)
	POST 	— return 201 (OK CREATED)
	PUT 	— return 200 (OK)
	DELETE 	— return 204 (NO CONTENT) 
REST API
- the messenger that takes requests adn tells a system what you want and then returns the response.
- a piece of software that plugs one application directly into the data and services of 
another, granting it access to specific parts of a server. 


API
- APIs are the 'middle man', they can sit between your program and the hardware (or other software)
- helps two different layers (software/hardware) talk to each other w/o having tons of code in common.
- these software layers help standardize the programing process so program can interact with lots 
of others easily
-makes it possible for all the disparate devices and software work well with each other
- device layer
	- APIs are used for communication between services
	- APIs let two pieces of software communicate
	- EX) An API for a website is code that allows two software programs to communicate with each another
	- APIs also control access to resources
	- APIs are also used to control access to hardware devices and software functions that an application 
	may not necessarily have permission to use. 
	- APIs often play a big role in security.

Driver
	- software that allows your computer to communicate with hadware or devices. (sound card)
	- very low level?

Processes and Threads
	- Processes are often seen as synonymous with programs
	- Threads exist within a process — every process has at least one. 
	- Threads share the process's resources, including memory and open files. 





--------------------------------------------------------


- Firmware is software written directly into our hardware devices.
- Firmware is stored on flash ROM (special types of memory) 
	- written once, by the manufacturer 
-exmpale
	There's firmware in computer motherboards (it's called BIOS or UEFI), there's firmware in hard disks, solid-state drives (SSDs), 
CD/DVD/Blu-Ray drives, there's firmware in network cards, routers, access points, range extenders, there's even firmware in your 
gaming mouse and keyboard. These are just some examples that are related to computers.
firmware VS operating system
	firmware is stored on the hardware device itself while drivers are installed inside the operating system. Also, firmware can start 
on its own and do what it is programmed to do while drivers must be run by the operating system. The biggest difference between the 
two is that the firmware tells the devices what they should do, while the driver tells the operating system how to communicate with 
the same devices.
- provides the low-level control for the device's specific hardware. 
--------------------------------------------------------

CONTAINERS

	- It allow you to package your application together with libraries and other dependencies, providing 
isolated environments for running your software services.
	- Instead of virtualizing the hardware stack as with the virtual machines approach, containers 
virtualize at the operating system level, with multiple containers running atop the OS kernel directly. 
	- Containers virtualize the operating system instead of hardware. 
	- containers are far more lightweight: they share the OS kernel, start much faster, and use a fraction 
of the memory  
	create predictable environments that are isolated from other applications. 
	allow you to package your application and its dependencies together into one succinct manifest that can 
be version controlledI
	Containers can also include software dependencies needed by the application, such as specific versions 
of programming language runtimes and other software libraries.
less time debugging and diagnosing 


--------------------------------------------------------

 Agile
	- iterative development
	- flexible, adaptive planning
	- frequenlt delievery
	- feedback, communication
	- face to face

Waterfall
	- progress and project phases are linear
	- development steps be taken throughout the software development
	
	
SOFTWARE AS A SERVICE
	- rent 
	- software is purchased as a subscription
	- the software is hosted on the cloud; accessed by the customer via internet, no worries about OS like mac
	- SaaS uses the web to deliver applications that are managed by a third-party vendor and whose interface 
is accessed on the clients’ side. Most SaaS applications can be run directly from a web browser without any 
downloads or installations required, 
	low risk for customer
	
	allows many businesses to exercise better and more predictable budgeting.
	SaaS removes the need for organizations to install and run applications on their own computers or in their own data centers.


Software Cycle
	- is a process that produces software with the highest quality and lowest cost in the shortest time
	- Requirement gathering and analysis -Meetings with managers, stake holders and users are held in order 
to determine the requirements
	- Design - specifying hardware and system requirements and also helps in defining overall system 
architecture
	- Implementation - work is divided in modules/units and actual coding is started. 
	- Testing - unit testing, integration testing, system testing, acceptance testing, non-functional testing 
	- Deployment 
	- Maintenance - problems comes up and needs to be solved
	
--------------------------------------------------------

Threads & Processes
	a process is a collection of virtual memory space, code, data, and system resources. a thread is code that is to be 
serially executed within a process. a processor executes threads, process always has at least one thread of execution, 
known as the primary thread

SDK (Software Development Kit)
	- a set of software development tools that allows the creation of applications for a certain software 
package, software framework, hardware platform, computer system, video game console, operating system, or 
similar development platform
	- ex) visual editors or debuggers, chat SDK, or image SDKs

Protocol
		A protocol is a set of rules and guidelines for communicating data. Rules are defined for each step 
and process during communication between two or more computers. Networks have to follow these rules to 
successfully transmit data.
	
--------------------------------------------------------
C# and C++


DEBUG AND Release
	- Debug and Release are just labels for different solution configurations.
	- Release mode optimizes 
	- Debug generates debug data, in.pdb (Program Database File) files 

PREPROCESSOR DIRECTIVE 
	#IF DIRECTIVE
	- compiless the code between the directives only if the specified symbol is defined
	- followed eventually by an #endif directive
	- eg) #if (DEBUG && !MYTEST)
	
STA Thread
- tells the compiler to use a Single Thread Apartment model
- If not present, the application uses the multithreaded apartment model, which is not supported for Windows Forms.
- used for Windows Forms (GUI's) as that uses Win32 for its drawing, which is implemented as STA. If you are using something that's STA model from multiple threads then you get corrupted objects
- don't worry about it, just accept that Windows GUI threads must be marked as STA otherwise weird stuff happens

Win32 = Window's (API) for developing 32-bit applications,  available in the Microsoft WIndows operating systems

LAZY
	- “Lazy Instantiation” defers creation of an object till the time it is actually accessed.
	- Lazy Instantiation optimizes resources by using them when it is actually required
	- The process of object creation is always expensive as it involves allocation of memory on the heap.
	- when object creation is non-trivial (taxing)

COM (Component Object Model)
	- COM is a mechanism that was developed (by Microsoft) to allow people to distribute binaries that could be reused even if the 
		caller was using another vendor's C++/C# compiler or (ultimately) a different language altogether.
	- The essence of COM is a language-neutral way of implementing objects that can be used in environments different from the one in 
		which they were created, even across machine boundaries
	- COM is a platform-independent, distributed, object-oriented system for creating binary software components that can interact	
		it defines a binary interoperability standard for creating reusable software libraries that interact at run time. 
		libraries without the requirement of compiling them into your application.
ASSEMBLY
	- In C# terms, it's basically a single C# project.
	- An assembly is the compiled output of your code, typically a DLL or EXE 
	- Assembly is the smallest unit of deployment of a .net application. It can be a dll or an exe.
	- Ttwo types: Private Assembly, Public/Shared Assembly, Satellite Assembly
		- Assemblies are the building blocks of .NET Framework applications; they form the fundamental unit of deployment, version 
control, reuse, activation scoping, and security permissions. An assembly is a collection of types and resources that are built to 
work together and form a logical unit of functionality.
	(Access modifiers article) .. All types and type members have an accessibility level, which controls whether they can be used from 
other code in your assembly or other assemblies
	https://stackoverflow.com/questions/2972732/what-are-net-assemblies
	https://social.msdn.microsoft.com/Forums/en-US/088ce8ed-ef9b-4dea-88b3-ca016885e26d/what-is-an-assembly-in-terms-of-c?forum=csharplanguage
	

BOXING
	- boxing and unboxing are computationally expensive processes.
	int i = 123;      // a value type
	object o = i;     // boxing
	int j = (int)o;   // unboxing

Struct Vs Class
		- struct: all members are public by default
		- class: all members are private by default
		- classes are reference types and structs are value types
		- structures do not support inheritance
		- structures cannot have default constructor
		- Purpose: The general rule to follow is that structs should be small, simple (one-level) 
collections of related properties, that are immutable once created; for anything else, use a class.

------------------------------------------------------------------------

LIBRARY VS FRAMEWORK

	Library

		- It is a collection of objects/functions/methods (depending on your language) and your application links it 
			and uses those objects/functions/methods
		- A file containing re-usable code that can usually be shared among multiple application
		- A library contains many pieces of functionality that you may pick and choose from 
		
		ex) Network protocols, compression, string utilities, regular expressions, math. 

	Framework
		- Embodies some abstract design, with more behavior built in. You need to insert your code inot the framework 
			someway The framework's code then calls your code at these points.

		- User still has code to link up but the most important work is done by the application.	
		- Everything you use in application development. It can be a library, a collection of many libraries, a 
collection of scripts, or any piece of software you need to create your application. Framework is just a very vague 
term.

	ex) Web application system, Plug-in manager, GUI system. 



	- A library contains many pieces of functionality that you may pick and choose from 
		- i.e. using one piece of technology doesn't mean you're locked into the rest. 
		- you will have more work cut out for you, but more control.


	- A framework however very much sets out how you will be working. 
	- It provides a workflow that is hard to change (for better or worse). 

	- This means rapid development/prototyping, but if significant changes are made in the future it may be 
impossible (or very time consuming) to implement them.


.NET v C#

- C# is a programming language, 
- .NET is the framework that the language is run on.
- C# is a language created for use with .NET.
ASP v ASP.NET

 	- ASP.NET is an extension of .NET

	- Used for writing web-based applications and websites. 

	- ASP is an older web framework and outdated technology, do not trouble yourself with it.	
	- ASP and ASP.NET are quite different under the hood. Only language options are VBScript and JScript. 
.NET 
	- .NET is used to develop Form-based applications, Web-based applications, and Web services.
	- .NET apps are in C#, F#, or Visual Basic.
	- Different .NET implementation do diffrent things:

	.NET Core 
		- should be used for cross-platform needs

		- should be used for containerized apps

		- high performance and scalability 
		- cross-platform for websites, servers, and console apps on macOS, Windows, and Linux.
	.NET Framework 
		- supports websites, services, desktop apps, and more on Windows.
		- Provides Windows forms  (ASP.NET Web Forms , Windows Presentation Foundation (WPF))
.NET Core offers significant benef(its for new applications and application patterns. However, the .NET Framework continues to be the natural choice for many existing scenarios and as such the .NET Framework isn't replaced by .NET Core for all server applications.





- The combination of Operating System Architecture and CPU Architecture is known as the platform. 
- A .NET application is platform dependent because of the .NET framework which is only able to run on the Windows-based operating system. The .Net application is platform independent also because of Mono framework

- 	Visual Studio is the development tool which is used to design and develop the .NET applications. For using Visual Studio, the user has to first install the .NET framework on the system.



.NET is a free, cross-platform, open source developer platform for building many different types of applications.

With .NET, you can use multiple languages, editors, and libraries to build for web, mobile, desktop, gaming, and IoT.





Partial Class

A single class split into multiple files
-  all files are combined into a single class file when the application is compiled. 

-  partial keyword. 
public partial Geeks 
{ // code  }
 combines Geeks1.cs and Geeks2.cs into a single file, i.e. Geeks

PROS 
With the help of partial class multiple developers can work simultaneously on the same class in different files.


Inline Method

eg) [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
- Inlining a method/property means that the compiler takes it and replaces the calls to it with its contents 

- replaces a function call site with the body of the called function.
- compiler optimization
- improve performance

- occurs during compilation, without changing the source code 
- Related: (recommend the compiler to Inline via AggressiveInLining) https://www.dotnetperls.com/aggressiveinlining 

Attribute
	[ myAttribute]
	- square brackets
	- it associates metadata with code
	- Reflection: After associattion, the attribute can be queried at run time by using reflection
	SeializableAttribute:
		[System.Serializable]
		public class SampleClass
		{	
			// Objects of this type can be serialized.
		}


DYNAMICALLY LINKED LIBRARY - DLL
	A library of code used by 2+ applications at the same time 
		libraries/modules
	Used by 2+ application.
	Manageable smaller chunks of code
	-Libraries can be loaded at runtime and thus shared between different concurrent applications. This is called 
dynamic linking.
	-In some cases the library can be included within the application itself. This is known as static linking. Static 
linking makes deployment easier at the cost of flexibility as different application will each load the same copy of 
the DLL.
	-However, static linking is not always an option. E.g. you can't statically link a .NET application. The user 
must have the .NET libraries in order to run a .NET application and libraries (or assemblies as they are called in 
.NET) are loaded at runtime.
	
	Common methods (file processing or GUI) are made available in libraries 
		- thus multi applications have the functionality. 
		- Reduces code duplication (one fix/change effects all apps)
		- Ensures comminality
			ex) common dialogs are the same between applications.
			
	(2nd source)
	links applications to libraries at run time. The libraries remain in their own files and are not copied into the executable files of the applications. DLLs link to an application when the application is run, rather than when it is created
			
 

-------------------------------------------------------------------------------

volatile bool emulator_running = false;
public bool IsCrashed => !emulator_running;
	[...]
if(!api.IsCrashed)
		Frame++;
		


----------------------------------------------------------------------------

Single responsiblity principle
	- every class & method has a single responsiblty
	- makes it easy to quick and reason what each portion of the project is
	- if a class or method is doing too much and its hard to tell what it's doing
	
/etc
	system wide configurations
	not user specfic config
	
/boot
	system boot
	where your system starts
	
/dev
	device
	keyboards, mice, network?

/bin
	binaries
	ls, cd, chmod
	
/lib
	library
	librarys that apps could use to provide various function
	
/mnt
/mount
/media
	other mounted drives
	floppy disk, usb, network drive, external hd, (A: or B: drive in windows)
	
/opt
	optional
	where manually installed sw from venders resides
	
/proc
	psudeo files that contain info about system processes and resources
	# cat  /proc/cpuinfo
	# cat /proc/uptime
	
/root
	the root user's home folder
	unlike users home folder it rsides not in the default home file
	root always has access to its home directory in this area
	
/run
	it runs in RAM, so everything is gone when the system restarts

/sbin
	system bin
	
/snap
	snap packed (used by ubuntu)
	
/srv
	service directory for syervice data
	if you run a server like ftp then it has better security

/sys
	system
	a way to interact to the kernal
	could make changes to graphics card
	
/tmp
	temporary
	files are temp stored by application
	an app might write to temp requently in case the app crashes
	is usually emptied on system restart
	
/usr
	apps installed by the user
	non essential for basic system operations
	
/var
	variable
	files that are expected to grow
	/var/crash holds info about stuff that crashed
	/var/log contains log files about many system
	
/home
	each user has own folder
	store personal documents
	store personal app's configs
	
	
---------------------
	DESIGN PATTERNS

https://www.tutorialspoint.com/design_pattern/



FACTORY
	- related to object creation
	- we create object without exposing the creation logic to client 
	- uses a static member-function (static factory method) which creates & returns (newly created) objects
	- Advantage: provides "code for interface rather than implementation."
	ex)	 ShapeFactory shapeFactory = new ShapeFactory();
		 Shape shape1 = shapeFactory.getShape("CIRCLE");
		 Shape shape2 = shapeFactory.getShape("SQUARE");
MVVC 
	- Model-view-ViewModel
	- essential, the view does extra work on the data
	- the ViewModel of MVVC s a value converter, meaning it is responsible for converting the data objects 
from the model in such a way that objects are easily managed and presented. 
	- the ViewModel is more model than view, and handles most if not all of the 
view's display logic

OBSERVER PATTERN 
	- a software design pattern 
	- an object (the subject), maintains a list of its dependents, (the observers), and notifies them 
automatically of any state changes, usually by calling one of their methods.
	-  in event driven software.
	https://www.geeksforgeeks.org/observer-pattern-set-2-implementation/

(LOOSE COUPLING)
	-  is an approach to interconnecting the components in a system so that those components, depend on each 
other to the least extent practicable.
	- hardware and software may interact but they are not dependant on each other to work
	-The goal of a loose coupling architecture is to reduce the risk that a change made within one element 
will create unanticipated changes within other elements.
	- (network, hardware, software, or other functional components)
	
----------------------------------------------------------------------------
----------------------------------------------------------------------------
							NETWORKING
----------------------------------------------------------------------------
----------------------------------------------------------------------------

Networking Devices: 
	Modem
	Hub
	Switch 
	Router
	Gateway
	
hubs & switches are used to create networks
	- hubs are older and worse, not used often
	- hub & switches use mac address)
	
routers are used to connect networks
	- routers use IP address, thus it can talk to outside world
	
Gateway: interconnects different networks


	
a modem is what brings the internet into your house
	b/c there are only 2 types of signals
A coputer only reads digital siganls
the internet only reads analog singals
	signals to your comp: the modem demodulates the analog singals into digital signals
	signals from your comp: the domem modules the digital signals into analog siganls.
		
	
NIC - Network Interface Card
	- the card that allows you to connect to the internet
	- manages network connection
	- fits into a slot in motherboard, or external port
	- often a cable (Cat5) connects NIC to another device OR a wireless thing built in computer
	- all comps have a NIC
	- NIC is connected to a hub/switch
	- routers direct traffic
	- the server uses high end connections to transmit data on internt

Peer 2 Peer - a singel cable between 2 computers (not common)	

networks usually require 3 pcies of hardware
	- Network card
	- cable
	- device to connect to 
	
HUBS, SWITCHES, and ROUTERS
Hubs & Switches
	- Both used to create internal network
	- Both, the purpose, to connect all devices together on an internal network1
	- Both doesnt exchanged data to an outside network
	- Both does not read IP addresses
	Hubs: 
	- Not intelligent, b/c
	- when a data packet comes in one port then the same data packet is broadcasted to all other ports
	- secruity problems and wastes bandwidth
	Switch :
	- intelligent, b/c
	- learns physical address of connected devices 
		- ie, mac address is saved in a table
	- data packets are sent to targeted device
	
Router 
	- forwards data from 1 network to another based on IP address
	- the router determines if the recieved data is for the router's (internal) network or another network
	- router = gateway of a network
	
WAN - Wide Area Network
	- a network over a lorge geographical area (corparations business in NY to LA)
		- Domain "Charter in NYC" to Domain "Charter in LA"
	- it connectes diffrent small networks(LANs)
		- so comps in one location can communicate w/ comps in ahtoer
		- building to building, town to town, city to city
		
NAT - Network Addres Translation
	- NAT Is used in routers
	- translate a set of IP addres to another set of IP address
	- helps preserve limited amount of IPv4 address
	
IPv4 - there are 2 types	
	- Public or Private
	- cannot access internet w/ private, your private is used internally/locally
	- your router gives your internal devices a private IP
	- public is publicly registered on internet, must have public IP to go on the internet
	- router will gives private IP address to your internal devies
	- the private IP will be tranaslted by NAT to public IP address
	- the public IP will be translated by NAT to private

HTTP - not secure
	 - data is sent in plain text
	 - hacker could listen to data (man in middle-ish)

HTTPS - encrypts the data
	 
TCP - data is in order
	- to make sure that data delivery over a network is carried out correctly
	- Checksum, acknowledgement, order
	
UPD -	
	UDP cannot guarantee packet delivery.

	UDP is a faster and more efficient protocol than TCP because it dose not carry out all of the checks to make sure that the communication is perfect.

	UDP is ideal for time sensitive applications, where lost packets are not as important as delayed packets.
	
	UDP works well with application broadcast needs, e.g. ARP, and multi-casting, i.e. communicating with selected clients on the network.

	Common network applications that use UDP include:
		Domain Name System (DNS)
		Streaming media applications IPTV, i.e. watching TV on a computer system
		Trivial File Transfer Protocol (TFTP)
		Voice over IP (VoIP), i.e. using the network backbone and TCP/IP for telephone calls.


Port is a logical connection used by programs & services to exchange information

Recall an REST API (one guy called it Business API)
	- simple for app developers
	- exposes data or services for public consuption
	- purpose: external app developers can use the API which grows the business.

MICROSERVICES
	Recall: service - repeatable business task
	- he archeticture of a program is broken into parts
	- Seperated into business logic chunks (eg, business might have Inventory Serivce, Shipping Service, Account 
Service)
	- API; services communciate to each other via APIs
	- if one microservice fails another service picks up
	- containerized
	Disadvantage
	- complex networking
	
	
note - Docker v VM
	- VM has a guest operating system
	- docker does not have a guest OS

MONOLITHIC- 
	- obstacle to scaling development. 
		- to update one component you have to redeploy the entire applicat
		- difficult for seperate teams to work independently (the UI team, accounting team, inventory team, etc.)
		- The teams must coordinate their development efforts and redeployments. 
	- compromise on the choice of hardware. ... memory database or cpu image processing
		
Microservice Archetiture
	- Each microservice performs a single task
	- microservice components are loosely coupled and communicate via APIs
	- apps are containerized
	- need Containerization Orchestrator (CO)
		- COs: Kubernetes, Azuere Container service, Amazon ECS, Marathon, Docker Swarm, Google Container Engine, 
	-  business logic is decomposed into a collection of small, loosely coupled, distributed components that collectively form the 
larger application. 
	- apps that follow MS arch are: 
		self-healing
		cost efficient
		easily updated and maintained through CI/CD.
		easy to automate the infrastructure 
		components should be stateless (user data)
	- expect an API gateway
	- An API gateway is programming that sits in front of an application programming interface (API) and acts as a single point of 
entry for a defined group of microservices	
	Kubernetes:
		- Node: 
			- Instance of a computer
			- it is running kubernetes, it is running a Kubelet (kubelet=application that communicates w/ master)
		- Pod:
			- 1+ container, exists on a node
		- Service:
			- Handels requres from inside or outside the cluster
			- Usually a load balancer
		- Deployment
			- Defines desired state 


Service Discovery
	- how apps get the IP of the service
	- how services make their IP known for applications
  Service Registry 
	- is a database of available service instances
  Client Side Service Discovery, 
	 - clients query the service registry, select an available instance, and make a request.
	 - the client obtains the location of a service instance by querying a Service Registry, which knows the locations of all service instances.
	 - netflix eureka
	 - heart beats - eurka client pings the euerka server which pings the services
	 - if service goes down the disc service will eventually be noticed
		 - if (the disc service) goes down, the client will use the cached data
  Server Side Service Discovery
	 - clients make requests to a discovery server (load balancer), which queries the service registry and forwards the request to an available instance. - aws elb
	 - libraries that facility server side discvoery will resid eont he client
	 - ssd = less hops

	 AWS Elastic Load Balancer (ELB) is an example of a server-side discovery
	 
	 How does the client of a service - the API gateway or another service - discover the location of a service instance?
note: Load Bs vs API Gateway
- Load balancers and API gateways both handle network traffic
- LBs distributes incoming network traffic
- (Internet Request Traffic) ---> LB ----> Server 1 -
									 ----> Server 2 ----> Database
									 ----> Server 3 -

SERVICE ORIENTED ARCHETITURE (SOA)
 -is a mechanism for integrating multiple larger components, typically applications, together so they form an interoperable suite. 
Each component typically performs a complete piece of business logic from start to finish, usually involving a variety of specific 
tasks and functions needed to complete an entire larger action
 -A development organization using SOA would typically break the shopping site up into major sets of business logic and develop each 
as a separate application to be integrated together.
 -An organization using a microservices architecture would take that shopping cart and break it up into smaller task-oriented 
services. Instead of a shopping cart application there might be a tax calculation service, an add/remove item service, a shipping 
service, a billing service, and a compose final order service

 Feature				SOA									Microservices
component size		large piece of business logic		single task or small piece of business logic
coupling			generally loosely coupled			always loosely coupled

Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, 
interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired 
functionality.			
			
OSI Model (Open Systems Interconnection)

	- standard for communciation between computers or telecommunications
	- Computer A to Computer B; 
			- data flows down the OSI media and up again at 2nd computer
				- ComputerA: 7 to 1, 
				- Then network media (eg internet)
				- ComputerB: 7 to 1
			- 7. Application
			- 6. Presentation
			- 5. Session
			- 4. Transport
			- 3. Network
			- 2. Data Link
			- 1. Physical
		- 
	
			
n tier
  3 tier:
	- Presntaion layer 
		- UI, client
		- translate data/tasks to s/t the user can understand
	- Business/Logic layer
		- coordinates the commands recieved from the presentation layer
		- moves data from the presentation & data tier
		- makes logical decisions
		- calculates
	- Data Layer 
		- Queries and operations 
		- data is stored and retrieved
		
	
	
Integration testing = modules are combined and tsested
	
Note: high level elements that we as software architects are trained to consider:

Functional requirements of a system (what it should do, e.g 'process orders in this format...')

Non-functional requirements (how it should perform e.g. 'process at least 200 orders a minute')

Constraints (what is out-of-scope to change e.g. 'orders must be updated on our existing mainframe system').

Dev Ops 
	- ppl in operations knoww what ppl in developmetn are doing
	- development: writes codes, features, tests
	- operations: manages servers, traffic, scaling, RAM, cloud 
	- devops manager mearges the deveopment & oper4ations together
 
 
 Clould Native Apps:
	- applications and services built specifically to exist in the cloud.
	- Clould Native Apps =  Microservice archeticture
	- 

 cloud native system, on the other hand, should be largely self-healing, cost efficient, and easily updated and maintained through 
Continuous Integration/Continuous Delivery (CI/CD).
 \
 1 automation cloud makes it easier than ever to automate the infrastructure 
 2  design components to be stateless (user data)
----------------------------------------------------------------------------
SaaS	
	- On damand pay per use software
	- dont need to install SW on user's computer
	- the cloud runs an instance of the software
	- End customers use SaaS
	- Google docs, MS 365
Paas
	- made up of programming language environemnt, Operating system, webserver, database
	- manage data and app resources
	- Developers use SaaS
	- Windows Azure, Google app engine, heroku, AWS Elastice Beanstalk
	- Scaleable but developers are limted to the providers tools, and devs cannot migrate to another provider, ie they are locked into the (AWS) vendor

IaaS
	- offers computing resrouces but in a virtual environment
	- resources like data storage, servers, networking, virtualization,
	- AWS EC2s, rackspace
	- 
Infrastructure
	- the resources built for you on the cloud
	- the devices you are working on  load balancer, VPNs,servers
		- the service part of it is the software mangement that lets you click/program 
	- AWS = IaaS
	- Platform = opearting system, programming language????
	



----------------------------------------------------------------------------
	

LEFT JOIN
	SELECT Customers.CustomerName, Orders.OrderID
	FROM Customers
	LEFT JOIN Orders
	ON Customers.CustomerID=Orders.CustomerID
	
	- First, start from "FROM x LEFT JOIN y ON z=z2"
	- you'll get multiple rows with the same value of CustomerID, (w/ some differences in other fields)
	- this means "for each table, whenever there is a CustomerID value find the same CustomerID value in the other 
table
		if it exists in the right table, we have a match, so return all fields (or selected fields)
		if it exists or not in the left table return all fields
	- The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the 
right table (Orders).

OUTER JOIN
	SELECT Customers.CustomerName, Orders.OrderID
	FROM Customers
	FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
	
	- LEFT & RIGHT join, meaning you'll 
	- The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or 
not. 
So, if there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do 
not 
have matches in "Customers", those rows will be listed as well.

SELF JOIN
	SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
	FROM Customers A, Customers B
	WHERE A.CustomerID <> B.CustomerID
	AND A.City = B.City 
	
	
	-The following SQL statement matches customers that are from the same city:
	-A self JOIN is a regular join, but the table is joined with itself.
	-(Doesnt use JOIN)
	
UNION
	The UNION operator is used to combine the result-set of two or more SELECT statements.
	The columns must also have similar data types (int string?)
		- should be the same field, otherwise it is like mixing data in a column
		
GROUP BY


	SELECT COUNT(CustomerID), Country
	FROM Customers
	GROUP BY Country;
	
	- lists the number of customers in each country:
	- The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) 	
HAVING
	SELECT COUNT(CustomerID), Country
	FROM Customers
	GROUP BY Country
	HAVING COUNT(CustomerID) > 5;
	
	-The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

STORED PROCEDURES
	CREATE PROCEDURE SelectAllCustomers
	AS
	SELECT * FROM Customers
	GO;	
	(.....later)
	EXEC SelectAllCustomers;
	
	prepared SQL code that you can save, so the code can be reused over and over again.
	
EXISTS

	SELECT SupplierName
	FROM Suppliers
	WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);
	
	Returns TRUE and lists the suppliers with a product price<20
	ie, it returns the single colum table of "SELECT SupplierName FROM Suppliers"
	
	
	- The EXISTS operator returns true if the subquery returns one or more records.
	- is used to test for the existence of any record in a subquery.
	
ANY and ALL
	- like EXISTS but after WHERE and HAVING clauses
	- returns TRUE and the first query if the subquery exists (Usually a condition (ProductsSold>10))
	
MIN / MAX
	SELECT MIN(column_name)
	FROM table_name
	WHERE condition;
	
COUNT(), SUM(), AVG()	
	SELECT SUM(column_name)
	FROM table_name
	WHERE condition;
	
	(...returns this table)
	COUNT(ProductID)
	77
	
IN
	SELECT column_name(s)
	FROM table_name
	WHERE column_name IN (value1, value2, ...);

	The IN operator is a shorthand for multiple OR conditions.
	
BETWEEN
	WHERE column_name BETWEEN value1 AND value2;
	
UPDATE	
	UPDATE Customers
	SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
	WHERE CustomerID = 1;

DISTINCT
	SELECT DISTINCT column1, column2, ...
	FROM table_name;	

AND / OR
	WHERE condition1 AND condition2 AND condition3 ...;
	
INSERT
	INSERT INTO table_name (column1, column2, column3, ...)
	VALUES (value1, value2, value3, ...);	
	
NORMALIZATION
	- Database normalization is typically a refinement process after the initial exercise of identifying 
the data objects that should be in the relational database, identifying their relationships and defining 
the tables required and the columns within each table.
	- Normalization entails organizing the columns (attributes) and tables (relations) of a database to 
ensure that their dependencies (logical constraints, FK, PK) are properly enforced by database integrity 
constraints

DENORMALIZTION
	- is intended to speed query execution (reading faster, at the cost of write speed)
	- is used on a previously-normalized 
	
STAR SCHEMA
	- The Star schema is easy to understand and provides optimal disk usage.
	- The star schema consists of one or more fact tables referencing any number of dimension tables. 
	- facts are FKs referencing dimension tables
	- The dimension table contain the set of attributes. (date, product, or customer)
	- The dimension table is joined to the fact table using a foreign key
	- The dimension table are not joined to each other
	- The dimension tables are NOT normalized. 
	
	
	
SNOWFLAKE SCHEMA
	- A Snowflake Schema is an extension of a Star Schema, and it adds additional dimensions
	- fact table in the middle
	- The dimension tables are normalized which splits data into additional tables.
	- The main benefit of the snowflake schema it uses smaller disk space.
		https://www.guru99.com/star-snowflake-data-warehousing.html
----------------------------------------------------------------------------



every one function sould have one entrance and one exit

command-query specation; every method should be either a command or a query, not both. The answer 
to a question should not change the answer

method should do 1 thing (but erroneously it does multiple things)

passing boolean into function is bad

high level methods should do high level work and not low level work

bean are classes that encapsulate many objects into a single object (thebean)
----------------------------------------------------------------------------


'==' tests object reference in java

 
 
 public is visible from wherever.

internal is visible only within an assembly

assembly is a file that is automatically generated by the compiler upon successful compilation of every .NET 
application. It can be either a Dynamic Link Library or an executable file. 


----------------------------------------------------------------------------


JAVASCRIPT 

MAP
 - calls the  function once for each element in an array
 - like a for loop

 ex)
var numbers = [65, 44, 12, 4];
var newarray = numbers.map(myFunction)
// newarray = [650,440,120,40]

FILTER 
- calls a function that return those elements which satisfy a test condition

ex)
var nums = [32, -1, 16, 40];
function isPositive(value) { return value > 0; };
// posNums = nums.filter(x => x > 0);
posNums = nums.filter(checkAdult);
// ages2 = [32,16,40]

ex)
const animals = { name: 'dog', mammal: true},
				{ name: 'bear', mammal: true}, 
				{ name: 'salmon', mammal: false},]
myArr =animals.filter(a => a.mammal)
// myArr has 'dog' and 'bear'


REDUCE
- You have an array of amounts and you want to add them all up.
- It's weird and complex, dont invest time into this
ex)
	const euros = [29.76, 41.85, 46.5];
	const sum = euros.reduce((total, amount) => total + amount); 
	// 118.11
	

PROMISE
- Good for async programming
- use "new Promise(function(resolve,reject) { code }"
- resolve() in the promise is what will be returned in the ".then"
- reject() in the promise is what will be returned to the ".catch" of the implimentation
- Can do Promise.all([arry of promises])
ex)
let promiseToCleanTheRoom = new Promise( function(resolve, reject) {
  //Clean the room logic
  let isClean = false;  ////THIS
  if (isClean) {
	resolve('Clean')
  } else {
    reject('NOT clean')
  }
  });
  
promiseToCleanTheRoom.then( function(fromRes){
	console.log('the room is' + fromRes); // prints "the room is Clean" if isClean==true
}).cath(fucntion(fromRej){
	console.log('the room is' + fromRej) //  prints "the room is NOT clean" if isClean==false
}

EVENT
- target.addEventListener(*type*, *listener[, options]*);
- addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.
- events are sent to all elements of the same type. ie, he browser checks to see if the element's outer-most ancestor (<html>) has an onclick event handler
	- bubbling: events propagate outwards, from the element -> it's parent -> parent's parent -> root
	- capturing: events propagate in. root -> reaches the clicked element
	- solution: e.stopPropagation()
the event handler recieves the event object, that has data about the event "left click, right click, etc"

AJAX
- not a language or tool
- it's web development technique used to send/retrieve data in the backgorund w/o refreshing
- it is the use of the XMLHttpRequest object to communicate with servers
-  most appealing characteristic is its "asynchronous" nature
 
HTML BODY:

x-www-form-urlencoded:  simple text/ ASCII
						is the same as the one used in URL parameters.
form-data: binary data or non-ASCII text
			same as <form>, data is key/value
			it’s the object to represent HTML form data.
			(in js) let fd = new FormData();
			
Raw: A raw request can contain anything.  
	sends your raw string data as it is without modifications. 
	it will send plain text or JSON or any other kind of string
	The type of data that you are sending can be set by using the content-type header 
Binary: non-textual data 
		video, audio, images
		
HTTP POST
	POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header.
	
HTTP PUT
	for update
	
	


----------------------------------------------------------------------------------

REACT JS

JS library for creating UI

Start up:
$ npx create-react-app myreactproject
$ cd myreactproject
$ npm start

- need index.js & index.html
- hello = function() { return "Hello World!"; }
- hello = (val) => "Hello " + val;
- var myVar =  hello("World");
note: because of the arrow => , then "changeColor = function() { ... }" is differetn from "changeColor = () => {"

LET, CONST, VAR
let - block scope, in braces {}
	- can be updated but not re-declared.
const - block scope & constant
	  - cannot be updated or re-declared, must be initialized
var - function scope
	- if outside of function then it will be global

reactDom.render()
- takes two arguments, HTML code and an HTML element.
ex)	const myelement = <p>Hello</p>
	ReactDOM.render(myelement, document.getElementById('root'));
	
JSX
- Assigning html element into variables is b/c of JSX
- mMst have ONLY ONE top level element.
	ex) const myelement = <h1>I Love JSX!</h1>; 
	ex) const myelement = (
						  <div>
							<h1>I am a Header.</h1>
							<h1>I am a Header too.</h1>
						  </div>
						);
- Write expressions inside curly braces { }
	ex) const myelement = <h1>React is {5 + 5} times better with JSX</h1>; // 10

COMPONENTS
	- are independent and reusable bits of code that returns HTML
	- data is stored and handled using state and props.
	- Two types, Class-components and Function-components
		- function components does not have state
			- myFunctionName() { [Javascript code] return { [JSX code] }
		- class have state
			- class will have "extends React.Component" & and render method
			- class with state will have "constructor()"
		
	 
	- must have render() method. "render() { [...] return (html code) }"
	- A component takes in parameters, called props.
	- can have components in components
	- can have components in files
	Note the two are same: function() {alert("Hey dog!")
                                  () => alert("Hey dog!")
	- props comes from Parameters      ex) <Student age=14 />
	- state come from the class data   ex) this.state = { age: 14 }
	- key is a special and reserved property in React
	- key cannot be referenced using this.props.key
PROPS
- are passed to components via HTML attributes.	
	ex) 
		const myelement = <Car brand="Ford" />;
			[...]
		class Car extends React.Component {
			render() { return <h2>I am a {this.props.brand}!</h2> }	}
STATE
- are the variables of the class
- defined in constuctor()
- can pass data from one component to another, as parameters.
	1st) const carinfo = {name: "Ford", model: "Mustang"};
	2nd) return <Car brand={carinfo} />
	3rd) return <h2>I am a {this.props.brand.model}!</h2>;

LIFECYCLE
	- Each component has a lifecycle of 3 phases:
	- Mounting, Updating, and Unmounting.
		Mounting - putting elements into the DOM. Four are methods are called.
		Updating - whenever there is a change in the component's state or props. Five methods are called.
		Unmounting - when a component is removed from the DOM. One method	
OTHERS

- Don't use var anymore
- key is a special and reserved property in React
- key cannot be referenced using this.props.key

random docker
	docker run -p 3306:3306 your-sql-container
	Will publish the 3306 port of your container to the 3306 port of your VM.
	Connection con = DriverManager.getConnection("jdbc:mysql://10.0.2.15:3306/databaseName","root","myrootpassword");
	
	
when you have the power to call your code whenever you want that is library, otherhand, your framework calls your code	
----------------------------------------------------------
##########################################
 useEffect()
useEffect(() => { console.log('useEffect hook ran', songs) }, [songs]) 
		// 2 paramaters, 1st = code that runs when *it* renders/re-renders. 2nd = array of variables, if 1 variable is updated then it 
		//	triggers 1st param's code

##########################################
 useState()
- creates state variables.
- the object now has this.state.songs data.
- useState returns 2 values, 
- 1st is the array, 2nd is a function (arbitrary name) to change the data
	- The initial value will be assigned only on the initial render (if it’s a function, it will be executed only on the initial render).
	- In subsequent renders (due to a change of state in the component or a parent component), the argument of the useState hook will be ignored and the current value will be retrieved.
ex)
const [songs, set] = useState([ 
	{ title: 'Brand new Rollers', id: 1 },
    { title: 'Revive', id: 2 } ])
 [...]
	set([...songs, { title, id: uuid() }])   
			//Everything inside of "set"'s paratheses will replace "songs"
			// "title" is ES6 shorthand for "title: title" (since same name)
	
##########################################
useContext()
- gains access to the data (the context), which wraps this object
- Gets values from (below) "<ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme }} >"
ex)
	[Nav.js]
const { isLightTheme, dark, light } = useContext(ThemeContext)  //magically matches dark, light and isLight
	[ThemeContext.js]
export const ThemeContext = createContext();

export class ThemeContextProvider extends Component {
  state = { isLightTheme: true,  light: { color: '#555'}, dark: { color: '#ddd',} }

  toggleTheme = () => { console.log("clicked!!!") }

  render() {
    return (
      <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme }} >
        {this.props.children} 
      </ThemeContext.Provider>
	  		    // "this.props.children" refers to to <Nav /> & everything esle that <themeContext.provider> is wrapped around
				// in the App.js file
    );
  }
}
----------------------------------------------------------
SPRINGBOOT
-In a few words, we can say that the Spring Boot is simply an extension of Spring itself to make the development, testing, and 
deployment more convenient.
-To all the problems that arise from the Spring framework, Spring Boot is the solution. 
-faster and more efficient development eco-system.

- Header key="Content-Type" is http standard to say that the body is JSON
	- value="application/json" is read by spring mvc knowing it's json object


- in CONTROLLER, it's a java class that maps a URI and an HTTP Method to some functionality (some methods)
DEPENDENCY 
- Class A uses methods from Class  B


Dep Inj
- DI generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object
- thus the method doesnt have a direct dependecny on a particual implemenation
- classic example: passing a database object in the parameters of a object
 
- makes code testable

- sub diff depencies as long as they satisfy the interface
- prevents hard coding ... off loading the instatiation of some objects
- Dep Inversion princ: rely on abstractons rather than concreted implemenations
- di is arche design pattern
- abstract classes to interface, when we do, we decouple our implementations from each other
-DI => Abstraction = more modular = more flexible

Inversion of Control = 
	the framework does most of the work. 
	It coordinates the applications activity. IoC determines what to inject into the code. 
	User inserts his code (behavior and objects) into the framework. 
	The framework calls your code (not visa vera)
	in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, 


 Cookies V LocalStorage vs SessionStorage
  . Cookies are mainly for reading server-side, local storage can only be read by the client-side
  Cookies 4KB
	- sessionStorage expires when the tab is closed!
	Cookies are pretty much a convenient way to carry information from one session on a website to another, or 
between sessions on related websites, without having to burden a server machine with massive amounts of data 
storage. If 
	
	
	
(Maven )
- its a build and dependency managment tool
- Group ID = package name 
- Artifact ID = project name
- with spring, you only nned to care about the version of the parent and that parent will download all the correct version
	
	
	
	Sourcing a file is nothing but executing the file (line by line), but
The difference between sourcing and executing a file is : executing a file does not make any changes in the current shell


-----------------------------------------
CORS (Cross Origin Resource Sharing)
	- security feature in browsers
	- used by browers to give web apps access to selected resources.
	- server will responded regardess AND YET browser can get error
	- web apps on http://brodski-domain.com could only request resources from brodski-domain.com 
		- Access-Control-Allow-Origin: brodski-domain.com <== the server must set in response header.
		- browsers restrict cross-origin HTTP requests initiated from scripts. 
	-
	
API Key vs CORS
	- API Keys have limitations for a project, the server limits the projects use (ie, brodski.com is limited to 5,000/day)
	- CORS limit which domains could access the server 
	- CORS 
	
API keys are for projects, authentication is for users



	